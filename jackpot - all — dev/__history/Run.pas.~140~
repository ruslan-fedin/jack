unit Run;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, IniFiles,
  DBGridEhGrouping, ToolCtrlsEh, DBGridEhToolCtrls, DynVarsEh, EhLibVCL,
  GridsEh, DBAxisGridsEh, DBGridEh, IdBaseComponent, IdComponent,
  IdTCPConnection, IdTCPClient, IdExplicitTLSClientServerBase, IdMessageClient,
  IdSMTPBase, IdSMTP, IdUDPBase, IdUDPClient, IdSNTP, IdHTTP, Vcl.ComCtrls;

type
  TTRun = class(TForm)
    BtnExit: TButton;
    BtnAbout: TButton;
    BtnLogQut: TButton;
    Label4: TLabel;
    IdSNTP: TIdSNTP;
    Label6: TLabel;
    BtnLic: TButton;
    IdHTTP1: TIdHTTP;
    BtnSettings: TButton;
    BtnOtc: TButton;
    BtnSM: TButton;
    BtnClients: TButton;
    BtnSotr: TButton;
    GroupBox1: TGroupBox;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label5: TLabel;
    Edit1: TEdit;
    Edit2: TEdit;
    BtnLogin: TButton;
    BtnExitLogin: TButton;
    Label7: TLabel;
    StatusBar1: TStatusBar;
    Label8: TLabel;
    Edit3: TEdit;
    procedure FormShow(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure BtnClientsClick(Sender: TObject);
    procedure BtnExitClick(Sender: TObject);
    procedure BtnSMClick(Sender: TObject);
    procedure BtnSotrClick(Sender: TObject);
    procedure BtnSettingsClick(Sender: TObject);
    procedure BtnLoginClick(Sender: TObject);
    procedure BtnExitLoginClick(Sender: TObject);
    procedure BtnOtcClick(Sender: TObject);
    procedure BtnAboutClick(Sender: TObject);
    procedure BtnLogQutClick(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure BtnLicClick(Sender: TObject);

  private

    { Private declarations }
  public
    function serialNumberDisk(): string;
    function getLicInternat(): string;
    Function putDB(): string;
    function connectDB(): string;

    function isAdmin(): string;
    function logOut(): string;
    function setDbValue(): string;
    function writeDbLogin(): string;
    function getDateInt(): tdate;
    function writeDataInt(): string;
    function timeProg(): string;
    function CheckLoginAndPassword(Login, Password: String): Boolean;
    function getLicHardDisk(): string;


    function HashPassword(const Password: string): string;
    function VerifyPassword(const Password, Hash: string): Boolean;


    function BtnTrueMain():string;
    function BtnFalseMain():string;

    // function hashPassword(pass:string): string;

    { Public declarations }
  end;

var
  TRun: TTRun;
  Ini: TIniFile;
  login: string;
  SNTPClient: TIdSNTP;
  data_out: tdate;
  data_int: tdate;
  rez: integer;
  SerialNum, dtyp: Dword;
  a, b: Dword;
  Buffer, disk: array [0 .. 255] of char;
  f: TextFile;
  text: string;
  keyharddisk: string;
  day_end: string;

var
  put: string;

implementation

{$R *.dfm}

uses DataModule, Sprav, Works, Query, Client, Previewdb, UnitWorksAdd,
  UnitWorksEdit, UnitWorksRemove, OpenBD, ABOUT, UnitLogo, AddClients, FotoUnit,
  UnitClietsEdit, UnitClietsRemove, UnitOtchet, UnitSort, UnitSettings,
  UnitTime, DateUtils, Unit1, System.Hash, pass, UnitFunction;

function EncodeLic(s: string; code: boolean): string;
const
  Pas = 10;
var
  i, Delta, Res: integer;
begin
  Result := '';
  for i := 1 to Length(s) do
  begin
    Delta := ((i xor Pas) mod (256 - 32));
    if code then
      Res := ((ord(s[i]) + Delta) mod (256 - 32)) + 32
    else
    begin
      Res := ord(s[i]) - Delta - 32;
      if Res < 32 then
        Res := Res + 256 - 32;
    end;
    Result := Result + chr(Res);
  end;
end;

procedure TTRun.BtnLogQutClick(Sender: TObject);
begin
  logOut();

end;

procedure TTRun.BtnLicClick(Sender: TObject);
begin
  Form1.ShowModal;
end;

procedure TTRun.BtnClientsClick(Sender: TObject);
begin
  TClient.ShowModal;
end;

procedure TTRun.BtnExitClick(Sender: TObject);
begin
  TRun.Close;
end;

procedure TTRun.BtnSettingsClick(Sender: TObject);
begin

  Settings.ShowModal;
end;

procedure TTRun.BtnSMClick(Sender: TObject);
begin

  TQuery.ShowModal;

end;

procedure TTRun.BtnAboutClick(Sender: TObject);
begin
  AboutBox.ShowModal;
end;

procedure TTRun.BtnOtcClick(Sender: TObject);
begin
  DataModuleDB.ADOTableOtc.edit;
  DataModuleDB.ADOTableClients.open;
  DataModuleDB.ADOTableOtc.UpdateRecord;
  Otchet.ShowModal;
end;

procedure TTRun.BtnSotrClick(Sender: TObject);
begin
  Sotr.ShowModal;
end;

function TTRun.BtnTrueMain: string;
begin

BtnSotr.Visible := true;
    BtnClients.Visible := true;
    BtnSM.Visible := true;
    BtnOtc.Visible := true;
    BtnSettings.Visible := true;

end;

function TTRun.CheckLoginAndPassword(Login, Password: String): Boolean;

begin

  var s1,s2: string;
    begin
    DataModuleDB.ADOQuerylogin.close;
    DataModuleDB.ADOQuerylogin.sql.clear;
    s1:='select * from Users where Login='+QuotedStr(login)+'and Password='+QuotedStr(password);
    DataModuleDB.ADOQuerylogin.sql.add(s1);
    DataModuleDB.ADOQuerylogin.active:=true;
    DataModuleDB.ADOQuerylogin.open;
    if not DataModuleDB.ADOQuerylogin.isEmpty then
    begin
    groupbox1.Visible:=false;


    //form1.ShowModal ;
    end
    else
    ShowMessage('Неправильно введены Login#Pass пожалуйста пройдите регистрацию')

end;
end;

procedure TTRun.BtnLoginClick(Sender: TObject);


var
  Login, Password: String;
begin
Login := Edit1.Text;
Password :=HashPassword(Edit2.Text);

CheckLoginAndPassword(login,password);




  //Password := Edit2.Text;
     // ShowMessage(password);

  //setDbValue();
  //writeDbLogin();
  login := Edit1.text;
  //isAdmin();

  Label6.Caption := 'login: ' + login;

  DataModuleDB.ADOQueryTime.SQL.Clear;
  DataModuleDB.ADOQueryTime.SQL.text := 'Select * from Dataprog';
  DataModuleDB.ADOQueryTime.open;
  data_out := DataModuleDB.ADOQueryTime.FieldByName('Data_out').AsDateTime;
  // заносим  сумму в переменную
  DataModuleDB.ADOQueryTime.Close;

  Label7.Caption := 'Лицензия активна включительно до: ' +
    DateTimeToStr(data_out) + '. Спасибо)';

end;

procedure TTRun.BtnExitLoginClick(Sender: TObject);
begin
  TRun.Close;
end;

function TTRun.BtnFalseMain: string;
begin
    BtnSotr.Visible := false;
    BtnClients.Visible := false;
    BtnSM.Visible := false;
    BtnOtc.Visible := false;
    BtnSettings.Visible := false;
end;

procedure TTRun.FormCreate(Sender: TObject);

begin

  // hashPassword();

  serialNumberDisk();

  getDateInt();
  Label4.Caption := 'Дата: ' + datetostr(data_int);
 // connectDB();
 // writeDataInt();
 // putDB();


end;

procedure TTRun.FormDestroy(Sender: TObject);
begin
  FreeAndNil(SNTPClient);
end;

procedure TTRun.FormShow(Sender: TObject);
begin
  // timeProg();
  // Logo.Show;

 // DataModuleDB.ADOQuerylogin.Active := true;

end;

/// /function
function TTRun.getDateInt: tdate;
var
  data: string;
begin
  SNTPClient := TIdSNTP.Create(nil);
  try
    SNTPClient.Host := '0.europe.pool.ntp.org';
    SNTPClient.SyncTime;
  finally

    data := DateTimeToStr(SNTPClient.DateTime);
    data_int := strtodate(Copy(data, 1, 10));
    // showmessage(datetostr(data_int));
  end;

end;

function TTRun.getLicHardDisk: string;
var
  licnotdisk: string;
begin

  licnotdisk := 'Нет локальной лицензии! Проверте лицензию.';
  if FileExists(keyharddisk) then

  begin



BtnTrueMain();

  end
  else
  begin
    showmessage(licnotdisk);

    BtnFalseMain();

  end;

end;

function TTRun.getLicInternat: string;

var
  key: string;
  licnotsrvtext: string;

begin
  licnotsrvtext :=
    'На сервере нет вашей лицензии! Обратитесь к администратору.';

  keyharddisk := IntToStr(SerialNum) + '.lic';

  Try
    IdHTTP1.Get('http://rusla2sq.beget.tech/');
    key := IdHTTP1.Get('http://rusla2sq.beget.tech/lic/' + IntToStr(SerialNum)
      + '.lic');

    if EncodeLic(key, false) = IntToStr(SerialNum) then
    begin
      Label7.Caption := 'Лицензия зарегистрирована. Спасибо)';

      BtnTrueMain();

      end
    else
    begin
      showmessage(licnotsrvtext);
     BtnFalseMain();


    end;
  Except
    showmessage(licnotsrvtext);
    BtnFalseMain();
    End;

  //getLicHardDisk();

end;

function TTRun.HashPassword(const Password: string): string;
begin
  // Хэширование строки в MD5
  Result := THashSHA2.GetHashString(Password, THashSHA2.TSHA2Version.SHA256);
end;

function TTRun.setDbValue: string;
begin

  DataModuleDB.ADOQuerylogin.SQL.text :=
    'select * from Users where login=:p1 and password=:p2';
  DataModuleDB.ADOQuerylogin.Parameters.ParamByName('p1').Value := Edit1.text;
  DataModuleDB.ADOQuerylogin.Parameters.ParamByName('p2').Value := Edit2.text;
  DataModuleDB.ADOQuerylogin.ExecSQL;
  DataModuleDB.ADOQuerylogin.open;
end;

function TTRun.serialNumberDisk(): string;
begin
  dtyp := GetDriveType('c:/');
  dtyp := DRIVE_REMOVABLE;
  GetVolumeInformation('c:/', Buffer, sizeof(Buffer), @SerialNum, a, b, nil, 0);

end;

function TTRun.isAdmin: string;
begin

  if login = 'Admin' then
  begin

    Settings.BtnPass.Visible := true;
    Settings.BtnTime.Visible := true;
    Settings.BtnLic.Visible := true;

    BtnTrueMain();


  end
  else
  begin
    // getLicInternat();
    timeProg();

    Settings.BtnPass.Visible := false;
    Settings.BtnTime.Visible := false;
    Settings.BtnLic.Visible := false;

  end;
end;

function TTRun.logOut: string;
begin
  GroupBox1.Visible := true;
  Edit1.text := '';
  Edit2.text := '';

  DataModuleDB.ADOQuerylogin.Refresh;

  DataModuleDB.ADOQuerylogin.Close;
  DataModuleDB.ADOQuerylogin.open;
  DataModuleDB.ADOQuerylogin.last;
end;

function TTRun.putDB: string;

begin
  Ini := TIniFile.Create(ExtractFilePath(ParamStr(0)) + 'setting.ini');
  put := Ini.ReadString('Путь к БД', 'ConSrt', put);
  Ini.Free;
end;

function TTRun.timeProg: string;
var
  day: string;

begin
  DataModuleDB.ADOQueryTime.SQL.Clear;
  DataModuleDB.ADOQueryTime.SQL.text := 'Select * from Dataprog';
  DataModuleDB.ADOQueryTime.open;
  data_int := DataModuleDB.ADOQueryTime.FieldByName('Data_int').AsDateTime;
  data_out := DataModuleDB.ADOQueryTime.FieldByName('Data_out').AsDateTime;
  // заносим  сумму в переменную
  // DataModuleDB.ADOQueryTime.Close;
  if data_int < data_out then

    rez := daysBetween(data_int, data_out);

  showmessage(IntToStr(rez));

  DataModuleDB.ADOQueryTime.last;
  day := DataModuleDB.ADOQueryTime.FieldByName('day').AsString;
  day_end := day;
  showmessage(day_end);
  // day_end:=strtoint(day);
  if rez < strtoint(day_end) then
  begin
    showmessage('Срок действия лицензии истек. Обратитесь к Администратору');
    DeleteFile(keyharddisk);

    // Application.Terminate;
  end

end;

function TTRun.VerifyPassword(const Password, Hash: string): Boolean;
begin

Result := HashPassword(Password) = Hash;
end;

function TTRun.writeDataInt: string;
begin
  with DataModuleDB.ADOQueryTime do
  begin
    // запись в базу
    SQL.Clear;
    SQL.text :=
      'UPDATE Dataprog SET Dataprog.data_int = (:data_int) WHERE (((Dataprog.id)=1))';
    Parameters.ParamByName('data_int').Value := datetostr(data_int);
    ExecSQL;

  end;
end;

function TTRun.writeDbLogin: string;
begin
  if DataModuleDB.ADOQuerylogin.FieldByName('login').AsString <> '' then

  begin
    var
      today: TDateTime;
    GroupBox1.Visible := false;
    var
      p: string;

    with DataModuleDB.ADOQuerylogin do
    begin
      // запись в базу
      today := Now;
      p := THashMD5.GetHashString(Edit2.text);
     // showmessage(p);
      Edit2.text := p;
      SQL.Clear;
      SQL.text := 'insert into [Users] ([login],[password],[data_in]) ' +
        ' values (:login,:password,:data_in)';
      Parameters.ParamByName('login').Value := Edit1.text;

      Parameters.ParamByName('password').Value := THashMD5.GetHashString(Edit2.text);
      Parameters.ParamByName('data_in').Value := datetostr(today) + ' ' +
        TimeToStr(today);
      ExecSQL;

    end;
    with DataModuleDB.ADOQuerylogin do
    begin
      SQL.Clear;
      SQL.text := 'select * from Users';
      ExecSQL;
    end;
    DataModuleDB.ADOQuerylogin.Close;

    DataModuleDB.ADOQuerylogin.open;
    DataModuleDB.ADOQuerylogin.Refresh;
  end
  else
    showmessage('Пароль или логин не верный');
end;

procedure RefreshDataSet();
begin
  if DataModuleDB.ADOTableClients.Active then
    DataModuleDB.ADOTableClients.Refresh
  else
    DataModuleDB.ADOTableClients.open;
end;

function TTRun.connectDB: string;
begin
  DataModuleDB.ADOConnectionJackPot.Close;

  DataModuleDB.ADOConnectionJackPot.ConnectionString :=
    'Provider=Microsoft.Jet.OLEDB.4.0;User ID=Admin;Data Source=' + put +
    ';Persist Security info=False;';
  DataModuleDB.ADOConnectionJackPot.open;

  DataModuleDB.ADOTableWorks.Active := true;
  DataModuleDB.ADOTableClients.Active := true;
  DataModuleDB.ADOTableOtc.Active := true;
  DataModuleDB.DataSource1.Enabled := true;
  DataModuleDB.DataSource2.Enabled := true;
  DataModuleDB.DataSource3.Enabled := true;
  DataModuleDB.DataSourcelogin.Enabled := true;
  DataModuleDB.DataSourceTime.Enabled := true;
  DataModuleDB.ADOTableClients.Active := false;
  DataModuleDB.ADOTableWorks.Active := false;
  DataModuleDB.ADOTableOtc.Active := false;
  DataModuleDB.DataSourceTime.Enabled := false;
  DataModuleDB.ADOTableWorks.Active := true;
  DataModuleDB.ADOTableClients.Active := true;
  DataModuleDB.ADOTableOtc.Active := true;
  DataModuleDB.ADOTableWorks.last;
  DataModuleDB.ADOTableClients.last;
  DataModuleDB.ADOTableOtc.edit;
  DataModuleDB.DataSourcelogin.edit;
end;

end.
