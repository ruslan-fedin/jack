unit func;

interface

function BtnFalseMain: string;
function BtnTrueMain: string;
function EncodeLic(s: string; code: boolean): string;
function VerifyPassword(const Password, Hash: string): boolean;
function HashPassword(const Password: string): string;
function SerialNumberDisk(): string;
function LogOut(): string;
function GetLicHardDisk(): string;
// function CheckLoginAndPassword(Login, Password: String): Boolean;

implementation

uses Run, DataModule, System.Hash, DateUtils, Vcl.ComCtrls, Winapi.Windows,
  System.SysUtils;

var
  SerialNum, dtyp: Dword;
  keyharddisk: string;


  //Проверим лицензию на жёстком диске
function GetLicHardDisk: string;
var
  licnotdisk: string;
begin

  licnotdisk := 'Нет локальной лицензии! Проверте лицензию.';
  if FileExists(keyharddisk) then

  begin
    BtnFalseMain();

    // BtnTrueMain();

    // UnitFunction.
  end
end;

  //
  function LogOut: string;
  begin
    Trun.GroupBox1.Visible := true;
    Trun.Edit1.text := '';
    Trun.Edit2.text := '';
    DataModuleDB.ADOQuerylogin.Refresh;
    DataModuleDB.ADOQuerylogin.Close;
    DataModuleDB.ADOQuerylogin.open;
    DataModuleDB.ADOQuerylogin.last;
  end;

  // Серийный номер жёсткого диска
  function SerialNumberDisk(): string;
  begin
    dtyp := GetDriveType('c:/');
    dtyp := DRIVE_REMOVABLE;
    GetVolumeInformation('c:/', Buffer, sizeof(Buffer), @SerialNum, a,
      b, nil, 0);

  end;

  // Кодируем Пароль
  function HashPassword(const Password: string): string;
  begin
    // Хэширование строки в MD5
    Result := THashSHA2.GetHashString(Password, THashSHA2.TSHA2Version.SHA256);
  end;

  // Проверяем пароль
  function VerifyPassword(const Password, Hash: string): boolean;
  begin

    Result := HashPassword(Password) = Hash;
  end;

  // Создаем ключ
  function EncodeLic(s: string; code: boolean): string;
  const
    Pas = 10;
  var
    i, Delta, Res: integer;
  begin
    Result := '';
    for i := 1 to Length(s) do
    begin
      Delta := ((i xor Pas) mod (256 - 32));
      if code then
        Res := ((ord(s[i]) + Delta) mod (256 - 32)) + 32
      else
      begin
        Res := ord(s[i]) - Delta - 32;
        if Res < 32 then
          Res := Res + 256 - 32;
      end;
      Result := Result + chr(Res);
    end;
  end;

  // Выключаем кнопки на главной форме
  function BtnFalseMain: string;
  begin
    Trun.BtnSotr.Visible := false;
    Trun.BtnClients.Visible := false;
    Trun.BtnSM.Visible := false;
    Trun.BtnOtc.Visible := false;
    Trun.BtnSettings.Visible := false;
  end;

  // Включаем кнопки на главной форме
  function BtnTrueMain: string;
  begin
    Trun.BtnSotr.Visible := true;
    Trun.BtnClients.Visible := true;
    Trun.BtnSM.Visible := true;
    Trun.BtnOtc.Visible := true;
    Trun.BtnSettings.Visible := true;
  end;

end.
